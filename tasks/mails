很好，我们来一步步梳理你的项目目标、当前状态、问题点和下一步需求。这样你可以快速进入开发。

---

## ✅ 项目目标：

构建一个 **支持 IMAP 登录的 Web 邮箱应用（React + Next.js）**，具备以下能力：

1. 登录邮箱账户（如 Exchange）
2. 拉取邮件并展示（从 IMAP 服务器）
3. **支持本地缓存邮件**（使用 IndexedDB，通过 `dexie`）
4. 优化加载速度和用户体验（减少每次重新拉取）

---

## ✅ 当前技术栈

| 项目   | 技术栈                    |
| ---- | ---------------------- |
| 前端   | ReactJS + Next.js      |
| 邮件通信 | IMAP 协议（通过后端或前端代理）     |
| 缓存   | IndexedDB（使用 dexie.js） |

---

## ✅ 目前问题

| 问题点           | 描述                 |
| ------------- | ------------------ |
| 每次都从服务器拉取所有邮件 | 加载慢，体验差            |
| 没有本地缓存机制      | 即使刷新页面也要重新加载       |
| 无分页/增量机制      | 全量拉取浪费资源           |
| Web 端需要缓存策略支持 | 目前未实现 IndexedDB 缓存 |

---

## ✅ 下一步需求（建议按优先级）

### 📌 第 1 步：实现邮件列表缓存机制（Dexie + IndexedDB）

目标：

* 首次拉取邮件列表后，保存到本地（`mails` 表）
* 页面加载优先显示本地邮件，再拉服务器新邮件

任务：

* [ ] 集成 `dexie` 并建立本地数据库
* [ ] 建立 `mails` 表结构：`id, subject, from, to, date, snippet`
* [ ] 拉取邮件后保存到本地
* [ ] 加载页面时先读取缓存并渲染

---

### 📌 第 2 步：实现分页加载（优化性能）

目标：

* 每次加载 20 封邮件
* 向下滚动加载更多邮件

任务：

* [ ] 修改 IMAP 拉取接口支持 `offset + limit`
* [ ] 前端支持分页 + 懒加载逻辑
* [ ] 与本地 IndexedDB 协同使用（如已缓存则不重复拉）

---

### 📌 第 3 步：邮件正文点击加载（按需加载）

目标：

* 点击一封邮件才加载其详细内容
* 正文也可做缓存

任务：

* [ ] 新建表 `mail_bodies` 存储正文
* [ ] 用户点击邮件时，先查缓存，没命中再从服务器拉

---

### 📌 第 4 步：增量同步机制

目标：

* 每次只拉取“新邮件”或“已更改邮件”
* 减少无效网络请求

任务：

* [ ] 在 IndexedDB 记录上次同步时间
* [ ] 拉取 IMAP 中变更的邮件（by UID 或时间戳）
* [ ] 更新本地缓存数据

---

## ✅ 表结构设计建议（Dexie）

```ts
mailDB.version(1).stores({
  mails: 'id, date, from, to, subject',
  mail_bodies: 'id' // 邮件正文
});
```

---

## ✅ 接下来你可以做的

你可以告诉我你现在的 IMAP 拉取方式（在哪个文件中、API 接口形式），我可以：

* 帮你补齐 IndexedDB 的前端接口封装
* 帮你设计“同步流程 + 缓存更新逻辑”

---

是否需要我生成一套 React hook 封装（例如：`useMailCache()`）？也可以一键复制用于你项目中。
